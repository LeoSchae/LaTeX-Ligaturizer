from typing import Optional, Literal, Union
from collections import OrderedDict

class Ligatures:
    def __init__(self, type: "Literal['ligature']", format: "Literal['unicode']"="unicode", ligatures: "dict" = {}, fonts: "Optional[list[str]]"=None):
        self.type = type
        self.format = format
        self.fonts = fonts
        self.ligatures = {}
        self.ligatures.update(ligatures)
    def __str__(self):
        return f"Ligatures(type='{self.type}', fonts={self.fonts}):\n\t{self.ligatures}"


class Macros:
    def __init__(self, type: "Literal['macro', 'macro + char']", format: "Literal['unicode', 'name']"="unicode", macros: "dict" = {}, fonts: "Optional[list[str]]"=None):
        self.type = type
        self.format = format
        self.fonts = fonts
        self.macros = {}
        self.macros.update(macros)
    def __str__(self):
        return f"Macros(type='{self.type}', fonts={self.fonts}):\n\t{self.macros}"

greek = Macros(type="macro", fonts=["DejaVu Italic"])
greek.macros.update({
    "alpha": "Œ±",
    "beta": "Œ≤",
    "gamma": "Œ≥",
    "Gamma": "Œì",
    "delta": "Œ¥",
    "Delta": "Œî",
    "varepsilon": "Œµ",
    "epsilon": "œµ",
    "zeta": "Œ∂",
    "eta": "Œ∑",
    "theta": "Œ∏",
    "vartheta": "œë",
    "Theta": "Œò",
    "iota": "Œπ",
    "kappa": "Œ∫",
    "lambda": "Œª",
    "Lambda": "Œõ",
    "mu": "Œº",
    "nu": "ŒΩ",
    "xi": "Œæ",
    "Xi": "Œû",
    "pi": "œÄ",
    "Pi": "Œ†",
    "rho": "œÅ",
    "sigma": "œÉ",
    "Sigma": "Œ£",
    "tau": "œÑ",
    "upsilon": "œÖ",
    "phi": "œï",
    "varphi": "œÜ",
    "Phi": "Œ¶",
    "chi": "œá",
    "psi": "œà",
    "Psi": "Œ®",
    "omega": "œâ",
    "Omega": "Œ©",
})


misc = Macros(type="macro")
misc.macros.update({
    "infty": "‚àû",
    "forall": "‚àÄ",
    "exists": "‚àÉ",
    "nexists": "‚àÑ",
    "partial": "‚àÇ",
    "emptyset": "‚àÖ",
    "cdots": "¬∑¬∑¬∑",
    "ldots": "...",
    "lceil": "‚åà",
    "rceil": "‚åâ",
    "lfloor": "‚åä",
    "rfloor": "‚åã"
})

operators = Macros(type="macro")
operators.macros.update({
    "times": "√ó",
    "cdot": "‚Ä¢",
    "cap": "‚à©",
    "cup": "‚à™",
    "neq": "‚â†",
    "leq": "‚â§",
    "geq": "‚â•",
    "in": "‚àà",
    "notin": "‚àâ",
    "subset": "‚äÇ",
    "supset": "‚äÉ",
    "approx": "‚âà",
    "equiv": "‚â°",
    "ll": "‚â™",
    "gg": "‚â´"
})

mathbb = Macros(type="macro + char")
mathbb.macros.update({
    "mathbb": {
        "N": "‚Ñï",
        "Z": "‚Ñ§",
        "Q": "‚Ñö",
        "R": "‚Ñù",
        "C": "‚ÑÇ",
    }
})

shorthand_NZQRC = Macros(
    type="macro",
    macros={
        "NN": "‚Ñï",
        "ZZ": "‚Ñ§",
        "QQ": "‚Ñö",
        "RR": "‚Ñù",
        "CC": "‚ÑÇ"
    })

mathcal = Macros(type="macro + char", macros={"mathcal": {}})
for c in list("ABCDEFGHIJKLMNOPQRSTUVWXYZ"):
    mathcal.macros["mathcal"][c] = chr(ord(c)-ord('A')+ord("ùìê"))


mathfrak = Macros(type="macro + char", macros={"mathfrak": {}})
for c in list("ABCDEFGHIJKLMNOPQRSTUVWXYZ"):
    mathfrak.macros["mathfrak"][c] = chr(ord(c)-ord('A')+ord("ùï¨"))


map_arrows = Macros(type="macro")
map_arrows.macros.update({
    "to": "‚ü∂",
    "mapsto": "‚üº"
})

# Name of the font to add to
MAIN_FONT = "DroidSansMono.ttf"

# Name of the font to create (no extensions and None for default)
OUT_FONT_NAME = "Test"

# Font to add new symbols from (ordered by priority)
FONTS = OrderedDict()
FONTS["Droid Sans Mono"] = "DroidSansMono.ttf"
FONTS["Fira Code"] = "FiraCode-Regular.ttf"
FONTS["Latin Modern"] = "LatinModernMath.otf"
FONTS["DejaVu Bold"] = "DejaVuSansMono-Bold.ttf"
FONTS["DejaVu Italic"] = "DejaVuSansMono-Italic.ttf"

# Alias for commands ( Not default behaviour only e.g. \renewcommand\cal[1]{{\mathcal{#1}}} )
#mathbb.macros["bb"] = mathbb.macros["mathbb"]
mathcal.macros["cal"] = mathcal.macros["mathcal"]
mathfrak.macros["frak"] = mathfrak.macros["mathfrak"]


sup_sub_ligs = Ligatures("ligature", fonts=["Fira Code"])
sup_sub_ligs.ligatures.update({
    "^0": "‚Å∞",
    "^1": "¬π",
    "^2": "¬≤",
    "^3": "¬≥",
    "^4": "‚Å¥",
    "^5": "‚Åµ",
    "^6": "‚Å∂",
    "^7": "‚Å∑",
    "^8": "‚Å∏",
    "^9": "‚Åπ",
    "_0": "‚ÇÄ",
    "_1": "‚ÇÅ",
    "_2": "‚ÇÇ",
    "_3": "‚ÇÉ",
    "_4": "‚ÇÑ",
    "_5": "‚ÇÖ",
    "_6": "‚ÇÜ",
    "_7": "‚Çá",
    "_8": "‚Çà",
    "_9": "‚Çâ"
})



# Bold greek
custom_b_greek = Macros(type="macro", fonts=["DejaVu Bold"])
for k in list(greek.macros.keys()):
    if k == "eta":
        continue
    custom_b_greek.macros["b"+k] = "b"+chr(ord(greek.macros[k]))

# The ligatures to add to the font
LIGATURES: "list[Union[Macros, Ligatures]]" = [
    greek,
    operators,
    misc,
    mathbb,
    shorthand_NZQRC,
    mathcal,
    mathfrak,
    map_arrows,
    custom_b_greek,
    sup_sub_ligs
]

COPYRIGHT = '\nProgramming ligatures added by Ilya Skriblovsky from FiraCode\nFiraCode Copyright (c) 2015 by Nikita Prokopov'